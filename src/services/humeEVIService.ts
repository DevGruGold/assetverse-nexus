// Hume EVI Service Integration
import { HUME_EVI_CONFIG } from './humeEVIConfig';

export class HumeEVIService {
  private apiKey: string;
  private conversationId: string | null = null;
  private isConnected: boolean = false;
  private baseUrl = 'https://api.hume.ai/v0/evi/chat';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  // Initialize Hume EVI conversation
  async initializeConversation(): Promise<boolean> {
    try {
      // Test API connection
      const response = await fetch(`${this.baseUrl}/configs`, {
        headers: {
          'X-Hume-Api-Key': this.apiKey,
          'Content-Type': 'application/json'
        }
      });
      
      this.isConnected = response.ok;
      console.log('Hume EVI service initialized:', this.isConnected);
      return this.isConnected;
    } catch (error) {
      console.error('Hume EVI initialization failed:', error);
      this.isConnected = false;
      return false;
    }
  }

  // Generate AI response using Hume EVI
  async generateResponse(
    userInput: string,
    context: { miningStats?: any; userContext?: any } = {}
  ): Promise<{ text: string; method: string; confidence: number }> {
    try {
      if (!this.isConnected) {
        await this.initializeConversation();
        if (!this.isConnected) {
          throw new Error('Hume EVI not available');
        }
      }

      // Use Hume EVI for context-aware response generation
      const response = await fetch(`${this.baseUrl}/completions`, {
        method: 'POST',
        headers: {
          'X-Hume-Api-Key': this.apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          prompt: userInput,
          context: context,
          config: HUME_EVI_CONFIG
        })
      });

      if (!response.ok) {
        throw new Error(`Hume EVI API error: ${response.status}`);
      }

      const result = await response.json();
      
      return {
        text: result.content || result.message || 'Response generated by Hume EVI',
        method: 'Hume EVI',
        confidence: 0.95
      };
    } catch (error) {
      console.error('Hume EVI response generation failed:', error);
      throw error;
    }
  }

  // Text-to-Speech using Hume's voice synthesis
  async speakText(text: string, voiceId?: string): Promise<void> {
    try {
      if (!this.isConnected) {
        await this.initializeConversation();
        if (!this.isConnected) {
          throw new Error('Hume EVI not available');
        }
      }

      // Use Hume's TTS capabilities
      const response = await fetch(`${this.baseUrl}/tts`, {
        method: 'POST',
        headers: {
          'X-Hume-Api-Key': this.apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: text,
          voice: voiceId || HUME_EVI_CONFIG.voice?.voiceId || 'default',
          config: HUME_EVI_CONFIG.voice
        })
      });

      if (!response.ok) {
        throw new Error(`Hume TTS API error: ${response.status}`);
      }

      const audioBlob = await response.blob();
      await this.playAudio(audioBlob);
    } catch (error) {
      console.error('Hume EVI TTS failed:', error);
      throw error;
    }
  }

  // Play audio blob
  private async playAudio(audioBlob: Blob): Promise<void> {
    return new Promise((resolve, reject) => {
      const audio = new Audio();
      const audioUrl = URL.createObjectURL(audioBlob);
      
      audio.src = audioUrl;
      audio.onended = () => {
        URL.revokeObjectURL(audioUrl);
        resolve();
      };
      audio.onerror = () => {
        URL.revokeObjectURL(audioUrl);
        reject(new Error('Hume audio playback failed'));
      };
      
      audio.play().catch(reject);
    });
  }

  // Check if service is available
  isAvailable(): boolean {
    return this.isConnected && !!this.apiKey;
  }

  // Disconnect from Hume EVI
  async disconnect(): Promise<void> {
    try {
      this.isConnected = false;
      this.conversationId = null;
      console.log('Hume EVI disconnected');
    } catch (error) {
      console.error('Hume EVI disconnect failed:', error);
    }
  }

  // Get conversation status
  getStatus(): { connected: boolean; conversationId: string | null } {
    return {
      connected: this.isConnected,
      conversationId: this.conversationId
    };
  }
}

// Factory function for creating Hume EVI service
export const createHumeEVIService = (apiKey: string): HumeEVIService => {
  return new HumeEVIService(apiKey);
};

// Export configured instance
export const humeEVIService = () => {
  const apiKey = import.meta.env.VITE_HUME_API_KEY;
  if (!apiKey) {
    throw new Error('HUME_API_KEY not found in environment variables');
  }
  return createHumeEVIService(apiKey);
};